{"version":3,"sources":["components/Cell/Cell.module.css","components/Board/Board.module.css","components/Controls/Controls.module.css","utility/constants.js","utility/solver.js","utility/generate.js","components/Cell/Cell.js","hooks/useClasses.js","components/Controls/Controls.js","components/Board/Board.js","hooks/useBoard.js","components/UI/CustomDialog/CustomDialog.js","App.js","index.js"],"names":["module","exports","TEST_BOARD","isSolved","clone","board","i","length","slice","solve","a","row","col","possible","num","parseInt","isNaN","startRow","startPosition","startCol","j","m","startEnd","boardLength","generateSudoku","randomCoords","randRow","randCol","Math","round","random","onlyOneSolution","oldNum","count","numSols","React","memo","val","changeBoard","styles","classes","Cell","push","Bottom","Right","Error","useClasses","className","join","value","onChange","event","target","invalidNum","onChangeHandler","Input","maxLength","prevProps","nextProps","StyledButton","withStyles","root","margin","Button","solver","reset","solveOne","Controls","variant","color","onClick","Board","useState","setBoard","newValue","newBoard","useBoard","resetBoard","Row","Col","anotherBoard","map","rowNum","colNum","key","CustomDialog","isOpen","handleClose","title","subtitle","children","howToPlay","Dialog","fullWidth","maxWidth","open","onclose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","useStyles","makeStyles","paper","padding","customDialog","display","flexDirection","App","setIsOpen","displayRules","setDisplayRules","useEffect","handleDialogOpen","style","textAlign","Paper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e32133b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"Cell_Cell__JGzUO\",\"Right\":\"Cell_Right__1S8nq\",\"Bottom\":\"Cell_Bottom__1TRkx\",\"Input\":\"Cell_Input__1tQbS\",\"example\":\"Cell_example__2fg_u\",\"Error\":\"Cell_Error__25nXX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2Vm6-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__3E7kZ\"};","export const newBoard = () => {\n  const array = [];\n  for (let i = 0; i < 9; i++) {\n    array[i] = [];\n    for (let j = 0; j < 9; j++) {\n      array[i][j] = 0;\n    }\n  }\n  return array;\n};\n\nexport const TEST_BOARD = [\n  [7, 0, 9, 0, 0, 2, 6, 8, 0],\n  [0, 0, 0, 0, 0, 0, 2, 0, 0],\n  [0, 0, 2, 0, 5, 0, 7, 0, 4],\n  [1, 9, 0, 0, 0, 7, 0, 6, 0],\n  [8, 6, 7, 1, 9, 5, 0, 4, 0],\n  [5, 0, 4, 0, 0, 0, 0, 9, 0],\n  [4, 3, 5, 7, 8, 0, 0, 2, 0],\n  [0, 0, 6, 4, 0, 0, 0, 0, 1],\n  [9, 8, 0, 5, 0, 6, 0, 0, 3],\n];\n","let isSolved = false;\nexport const clone = (board) => {\n  const clone = [];\n  for (var i = 0; i < board.length; i++)\n    clone[i] = board[i].slice();\n  return clone;\n}\nexport const solve = async (board) => {\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      if (board[row][col] === 0) {\n        isSolved = false;\n        for (let i = 1; i < 10; i++) {\n          if (possible(board, row, col, i)) {\n            board[row][col] = i;\n            await solve(board);\n            if (!isSolved) {\n              board[row][col] = 0;\n            }\n          }\n        }\n        return;\n      }\n    }\n  }\n  isSolved = true;\n  return;\n};\n\n\nexport const possible = (board, row, col, num) => {\n  if (num === \"\") return true;\n  num = parseInt(num);\n  if (num === 0) return true;\n  if (isNaN(num) || num < 0 || num > 9) {\n    return false;\n  }\n  // check row\n  for (let i = 0; i < board[row].length; i++) {\n    if (board[row][i] === num && col !== i) return false;\n  }\n  // check the column\n  for (let i = 0; i < board.length; i++) {\n    if (board[i][col] === num && row !== i) return false;\n  }\n  let startRow = startPosition(board, row);\n  let startCol = startPosition(board, col);\n\n  for (let i = startRow[0]; i <= startRow[1]; i++) {\n    for (let j = startCol[0]; j <= startCol[1]; j++) {\n      if (board[i][j] === num && (i !== row || j !== col)) return false;\n    }\n  }\n  return true;\n};\n\nconst startPosition = (board, m) => {\n  let startEnd = [0, 2];\n  const boardLength = board.length;\n  if (m >= boardLength / 3 && m <= (boardLength / 3) * 2) {\n    startEnd[0] = boardLength / 3;\n    startEnd[1] = (boardLength / 3) * 2 - 1;\n  }\n  if (m >= (boardLength / 3) * 2) {\n    startEnd[0] = (boardLength / 3) * 2;\n    startEnd[1] = boardLength - 1;\n  }\n  return startEnd;\n};\n","import { solve, possible } from \"./solver\";\n\nexport const generateSudoku = async (board) => {\n  const { randRow, randCol } = randomCoords();\n  board[randRow][randCol] = Math.round(Math.random() * 8) + 1;\n\n  await solve(board);\n\n  let onlyOneSolution = true;\n\n  while (onlyOneSolution) {\n    const { randRow, randCol } = randomCoords();\n\n    const oldNum = board[randRow][randCol];\n\n    board[randRow][randCol] = 0;\n\n    const count = [0];\n\n    await numSols(board, count);\n\n    onlyOneSolution = count[0] === 1;\n\n    if (!onlyOneSolution) {\n      board[randRow][randCol] = oldNum;\n    }\n  }\n  return board;\n};\n\nconst randomCoords = () => {\n  const randRow = Math.round(Math.random() * 8);\n  const randCol = Math.round(Math.random() * 8);\n  return { randRow, randCol };\n};\n\nexport const numSols = async (board, count) => {\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      if (board[row][col] === 0) {\n        for (let i = 1; i < 10; i++) {\n          if (possible(board, row, col, i)) {\n            board[row][col] = i;\n            await numSols(board, count);\n            board[row][col] = 0;\n          }\n        }\n        return;\n      }\n    }\n  }\n  count[0] += 1;\n  return;\n};\n","import React from \"react\";\nimport styles from \"./Cell.module.css\";\nimport { useClasses } from \"../../hooks/index\";\n\nconst Cell = ({ val, row, col, changeBoard, possible }) => {\n  const [classes] = useClasses(row, col, possible, styles);\n\n  const onChangeHandler = (event) => {\n    const num = parseInt(event.target.value);\n    const invalidNum = isNaN(num);\n    changeBoard(row, col, invalidNum ? 0 : num);\n  };\n\n  return (\n    <div className={classes.join(\" \")}>\n      <input\n        value={val === 0 ? \"\" : val}\n        onChange={(event) => onChangeHandler(event)}\n        className={styles.Input}\n        maxLength={1}\n      />\n    </div>\n  );\n};\n\nconst compare = (prevProps, nextProps) => {\n  return (\n    prevProps.val === nextProps.val && prevProps.possible === nextProps.possible\n  );\n};\n\nexport default React.memo(Cell, compare);\n","export const useClasses = (row, col, possible, styles) => {\n  let classes = [styles.Cell];\n  if (row === 2 || row === 5) {\n    // Right Strong\n    classes.push(styles.Bottom);\n  }\n  if (col === 2 || col === 5) {\n    // Bottom Strong\n    classes.push(styles.Right);\n  }\n\n  if (!possible) {\n    classes.push(styles.Error);\n  }\n\n  return [classes];\n};\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core\";\nimport styles from \"./Controls.module.css\";\n\nconst StyledButton = withStyles({\n  root: {\n    margin: \"auto\",\n  },\n})(Button);\n\nconst Controls = ({ solver, reset, random, solveOne }) => {\n  return (\n    <div className={styles.Controls}>\n      <StyledButton variant=\"contained\" color=\"primary\" onClick={solver}>\n        Solve\n      </StyledButton>\n      <StyledButton variant=\"contained\" color=\"primary\" onClick={solveOne}>\n        Solve One\n      </StyledButton>\n      <StyledButton variant=\"contained\" color=\"secondary\" onClick={reset}>\n        Clear\n      </StyledButton>\n      <StyledButton variant=\"contained\" onClick={random}>\n        New Puzzle\n      </StyledButton>\n    </div>\n  );\n};\n\nexport default React.memo(Controls, () => true);\n","import React, { Fragment } from \"react\";\nimport Cell from \"../Cell/Cell\";\nimport styles from \"./Board.module.css\";\nimport Controls from \"../Controls/Controls\";\nimport { solve, possible, clone, generateSudoku } from \"../../utility/index\";\nimport { useBoard } from \"../../hooks/index\";\n\nconst Board = () => {\n  const [board, setBoard, changeBoard, resetBoard] = useBoard();\n\n  const solver = async () => {\n    const newBoard = [...board];\n    await solve(newBoard);\n    setBoard(newBoard);\n  };\n\n  const solveOne = async () => {\n    \n    let Row = 0;\n    let Col = 0;\n\n    for (let row = 0; row < board.length; row++) {\n      for (let col = 0; col < board[row].length; col++) {\n        if (board[row][col] === 0) {\n          Row = row;\n          Col = col;\n          break;\n        }\n      }\n    }\n    const anotherBoard = clone(board);\n    await solve(anotherBoard);\n    changeBoard(Row,Col,anotherBoard[Row][Col])\n    \n  };\n\n  const random = async () => {\n    resetBoard();\n    const newBoard = await generateSudoku([...board]);\n    setBoard(newBoard);\n  };\n\n  let Board = null;\n  if (board) {\n    Board = board.map((row, rowNum) => {\n      return row.map((val, colNum) => {\n        return (\n          <Cell\n            val={val}\n            key={[rowNum, colNum]}\n            col={colNum}\n            row={rowNum}\n            board={board}\n            changeBoard={changeBoard}\n            possible={possible(board, rowNum, colNum, val)}\n          />\n        );\n      });\n    });\n  }\n\n  return (\n    <Fragment>\n      <Controls\n        random={random}\n        reset={resetBoard}\n        solver={solver}\n        solveOne={solveOne}\n      />\n      <div className={styles.Board}>{Board}</div>\n    </Fragment>\n  );\n};\n\nexport default Board;\n","import { useState } from \"react\";\nimport { TEST_BOARD } from \"../utility/index\";\n\nexport const useBoard = () => {\n  const [board, setBoard] = useState(() => TEST_BOARD);\n\n  const changeBoard = (row, col, newValue) => {\n    const newBoard = [...board];\n    newBoard[row][col] = newValue;\n    setBoard(newBoard);\n  };\n\n  const resetBoard = () => {\n    const newBoard = [...board];\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        newBoard[i][j] = 0;\n      }\n    }\n    setBoard(newBoard);\n  };\n\n  return [board, setBoard, changeBoard, resetBoard];\n};\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\n\nexport const CustomDialog = ({\n  isOpen,\n  handleClose,\n  title,\n  subtitle,\n  children,\n  howToPlay,\n}) => {\n  return (\n    <>\n      <Dialog\n        fullWidth\n        maxWidth=\"md\"\n        open={isOpen}\n        onclose={handleClose}\n        aria-labelledby=\"max-width-dialog-title\"\n      >\n        <DialogTitle id=\"max-width-dialog-title\">{title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>{subtitle}</DialogContentText>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          {howToPlay && (\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                handleClose();\n                howToPlay();\n              }}\n            >\n              How to Play\n            </Button>\n          )}\n\n          <Button onClick={handleClose} color=\"secondary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nCustomDialog.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string,\n  children: PropTypes.element.isRequired,\n};\n","import React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board/Board\";\nimport { withStyles, Paper, makeStyles } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport { CustomDialog } from \"./components/UI/CustomDialog/CustomDialog\";\n\nconst StyledButton = withStyles({\n  root: {\n    margin: \"auto\",\n  },\n})(Button);\n\nconst useStyles = makeStyles({\n  paper: {\n    padding: \"10px\",\n  },\n  customDialog: {\n    display: \"flex\",\n    flexDirection: \"Column\",\n  },\n});\n\nconst App = () => {\n  const classes = useStyles();\n  const [isOpen, setIsOpen] = useState(\"\");\n  const [displayRules, setDisplayRules] = useState(\"\");\n  useEffect(() => {\n    handleDialogOpen();\n  }, []);\n  const handleDisplayRules = () => {\n    setDisplayRules(true);\n  };\n  const handleHideRules = () => {\n    setDisplayRules(false);\n  };\n  const handleDialogOpen = () => {\n    setIsOpen(true);\n  };\n  const handleDialogClose = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"Title\">Sudoku Solver</h1>\n      <br />\n      <Board />\n      <div className=\"BottomControls\">\n        <StyledButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleDialogOpen}\n        >\n          Help\n        </StyledButton>\n      </div>\n      <CustomDialog\n        isOpen={isOpen}\n        handleClose={handleDialogClose}\n        className={classes.customDialog}\n        howToPlay={handleDisplayRules}\n      >\n        <h2 style={{ textAlign: \"center\" }}>Welcome to the Sudoku Solver!</h2>\n        <Paper className={classes.paper}>\n          <p>\n            <strong>To get Started, click on New Puzzle</strong>\n          </p>\n          <strong>Get Stuck?</strong>\n          <p>Get a hint by pressing Solve One</p>\n          <strong>Give Up?</strong>\n          <p>Press Solve to view the puzzle solution</p>\n          <p>Press Clear to start from scratch</p>\n        </Paper>\n      </CustomDialog>\n      <CustomDialog\n        isOpen={displayRules}\n        handleClose={handleHideRules}\n        className={classes.customDialog}\n      >\n        <h2 style={{ textAlign: \"center\" }}>How to Play Sudoku</h2>\n        <Paper className={classes.paper}>\n          <p>\n            <strong>Board Setup:</strong>\n          </p>\n          <p>\n            The classic Sudoku game involves a grid of 81 squares. The grid is\n            divided into nine blocks, each containing nine squares.\n          </p>\n          <p>\n            <strong>The rules of the game are simple:</strong>\n          </p>\n          <p>\n            Each of the nine blocks has to contain all the numbers 1-9 within\n            its squares. Each number can only appear once in a row, column or\n            box.\n          </p>\n        </Paper>\n      </CustomDialog>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}