{"version":3,"sources":["components/Cell/Cell.module.css","components/Board/Board.module.css","components/Controls/Controls.module.css","utility/constants.js","utility/solver.js","utility/generate.js","components/Cell/Cell.js","hooks/useClasses.js","components/Controls/Controls.js","components/Board/Board.js","hooks/useBoard.js","App.js","index.js"],"names":["module","exports","newBoard","array","i","j","TEST_BOARD","isSolved","clone","board","length","slice","solve","a","row","col","possible","num","parseInt","isNaN","startRow","startPosition","startCol","m","startEnd","boardLength","generateSudoku","randomCoords","randRow","randCol","Math","round","random","onlyOneSolution","oldNum","count","numSols","console","log","React","memo","val","changeBoard","styles","classes","Cell","push","Bottom","Right","Error","useClasses","className","join","value","onChange","event","target","invalidNum","onChangeHandler","Input","maxLength","prevProps","nextProps","StyledButton","withStyles","root","margin","Button","solver","reset","solveOne","Controls","variant","color","onClick","Board","useState","setBoard","newValue","useBoard","resetBoard","useEffect","anotherBoard","map","rowNum","colNum","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b8af467.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"Cell_Cell__JGzUO\",\"Right\":\"Cell_Right__1S8nq\",\"Bottom\":\"Cell_Bottom__1TRkx\",\"Input\":\"Cell_Input__1tQbS\",\"example\":\"Cell_example__2fg_u\",\"Error\":\"Cell_Error__25nXX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2Vm6-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__3E7kZ\"};","export const newBoard = () => {\n  const array = [];\n  for (let i = 0; i < 9; i++) {\n    array[i] = [];\n    for (let j = 0; j < 9; j++) {\n      array[i][j] = 0;\n    }\n  }\n  return array;\n};\n\nexport const TEST_BOARD = [\n  [7, 0, 9, 0, 0, 2, 6, 8, 0],\n  [0, 0, 0, 0, 0, 0, 2, 0, 0],\n  [0, 0, 2, 0, 5, 0, 7, 0, 4],\n  [1, 9, 0, 0, 0, 7, 0, 6, 0],\n  [8, 6, 7, 1, 9, 5, 0, 4, 0],\n  [5, 0, 4, 0, 0, 0, 0, 9, 0],\n  [4, 3, 5, 7, 8, 0, 0, 2, 0],\n  [0, 0, 6, 4, 0, 0, 0, 0, 1],\n  [9, 8, 0, 5, 0, 6, 0, 0, 3],\n];\n","let isSolved = false;\nexport const clone = (board) => {\n  const clone = [];\n  for (var i = 0; i < board.length; i++)\n    clone[i] = board[i].slice();\n  return clone;\n}\nexport const solve = async (board) => {\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      if (board[row][col] === 0) {\n        isSolved = false;\n        for (let i = 1; i < 10; i++) {\n          if (possible(board, row, col, i)) {\n            board[row][col] = i;\n            await solve(board);\n            if (!isSolved) {\n              board[row][col] = 0;\n            }\n          }\n        }\n        return;\n      }\n    }\n  }\n  isSolved = true;\n  return;\n};\n\n\nexport const possible = (board, row, col, num) => {\n  if (num === \"\") return true;\n  num = parseInt(num);\n  if (num === 0) return true;\n  if (isNaN(num) || num < 0 || num > 9) {\n    return false;\n  }\n  // check row\n  for (let i = 0; i < board[row].length; i++) {\n    if (board[row][i] === num && col !== i) return false;\n  }\n  // check the column\n  for (let i = 0; i < board.length; i++) {\n    if (board[i][col] === num && row !== i) return false;\n  }\n  let startRow = startPosition(board, row);\n  let startCol = startPosition(board, col);\n\n  for (let i = startRow[0]; i <= startRow[1]; i++) {\n    for (let j = startCol[0]; j <= startCol[1]; j++) {\n      if (board[i][j] === num && (i !== row || j !== col)) return false;\n    }\n  }\n  return true;\n};\n\nconst startPosition = (board, m) => {\n  let startEnd = [0, 2];\n  const boardLength = board.length;\n  if (m >= boardLength / 3 && m <= (boardLength / 3) * 2) {\n    startEnd[0] = boardLength / 3;\n    startEnd[1] = (boardLength / 3) * 2 - 1;\n  }\n  if (m >= (boardLength / 3) * 2) {\n    startEnd[0] = (boardLength / 3) * 2;\n    startEnd[1] = boardLength - 1;\n  }\n  return startEnd;\n};\n","import { solve, possible } from \"./solver\";\nimport { newBoard } from \"./constants\";\n\nexport const generateSudoku = async () => {\n  const { randRow, randCol } = randomCoords();\n  const board = newBoard();\n  board[randRow][randCol] = Math.round(Math.random() * 8) + 1;\n  await solve(board);\n  let onlyOneSolution = true;\n  while (onlyOneSolution) {\n    const { randRow, randCol } = randomCoords();\n    const oldNum = board[randRow][randCol];\n    board[randRow][randCol] = 0;\n    const count = [0];\n    await numSols(board, count);\n    console.log(count[0]);\n    onlyOneSolution = count[0] === 1;\n    if (!onlyOneSolution) {\n      board[randRow][randCol] = oldNum;\n    }\n  }\n  return board;\n};\n\nconst randomCoords = () => {\n  const randRow = Math.round(Math.random() * 8);\n  const randCol = Math.round(Math.random() * 8);\n  return { randRow, randCol };\n};\n\nexport const numSols = async (board, count) => {\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      if (board[row][col] === 0) {\n        for (let i = 1; i < 10; i++) {\n          if (possible(board, row, col, i)) {\n            board[row][col] = i;\n            await numSols(board, count);\n            board[row][col] = 0;\n          }\n        }\n        return;\n      }\n    }\n  }\n  count[0] += 1;\n  return;\n};\n","import React from \"react\";\nimport styles from \"./Cell.module.css\";\nimport { useClasses } from \"../../hooks/index\";\n\nconst Cell = ({ val, row, col, changeBoard, possible }) => {\n  const [classes] = useClasses(row, col, possible, styles);\n\n  const onChangeHandler = (event) => {\n    const num = parseInt(event.target.value);\n    const invalidNum = isNaN(num);\n    changeBoard(row, col, invalidNum ? 0 : num);\n  };\n\n  console.log(\"Cell Rendered\");\n  return (\n    <div className={classes.join(\" \")}>\n      <input\n        value={val === 0 ? \"\" : val}\n        onChange={(event) => onChangeHandler(event)}\n        className={styles.Input}\n        maxLength={1}\n      />\n    </div>\n  );\n};\n\nconst compare = (prevProps, nextProps) => {\n  return (\n    prevProps.val === nextProps.val && prevProps.possible === nextProps.possible\n  );\n};\n\nexport default React.memo(Cell, compare);\n","export const useClasses = (row, col, possible, styles) => {\n  let classes = [styles.Cell];\n  if (row === 2 || row === 5) {\n    // Right Strong\n    classes.push(styles.Bottom);\n  }\n  if (col === 2 || col === 5) {\n    // Bottom Strong\n    classes.push(styles.Right);\n  }\n\n  if (!possible) {\n    classes.push(styles.Error);\n  }\n\n  return [classes];\n};\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core\";\nimport styles from \"./Controls.module.css\";\n\nconst StyledButton = withStyles({\n  root: {\n    margin: \"auto\",\n  },\n})(Button);\n\nconst Controls = ({ solver, reset, random, solveOne }) => {\n  return (\n    <div className={styles.Controls}>\n      <StyledButton variant=\"contained\" color=\"primary\" onClick={solver}>\n        Solve\n      </StyledButton>\n      <StyledButton variant=\"contained\" color=\"primary\" onClick={solveOne}>\n        SolveNext\n      </StyledButton>\n      <StyledButton variant=\"contained\" color=\"secondary\" onClick={reset}>\n        Reset\n      </StyledButton>\n      <StyledButton variant=\"contained\" onClick={random}>\n        Random\n      </StyledButton>\n    </div>\n  );\n};\n\nexport default React.memo(Controls, () => true);\n","import React, { useEffect, Fragment } from \"react\";\nimport Cell from \"../Cell/Cell\";\nimport styles from \"./Board.module.css\";\nimport Controls from \"../Controls/Controls\";\nimport { solve, possible, clone, generateSudoku } from \"../../utility/index\";\nimport { useBoard } from \"../../hooks/index\";\n\nconst Board = () => {\n  const [board, setBoard, changeBoard, resetBoard] = useBoard();\n\n  useEffect(() => {\n    console.log(\"[Board] useEffect\");\n  }, [board]);\n\n  const solver = async () => {\n    const newBoard = [...board];\n    await solve(newBoard);\n    setBoard(newBoard);\n  };\n\n  const solveOne = async () => {\n    console.log(\"Board:\", board);\n    const anotherBoard = clone(board);\n    const newBoard = board;\n    await solve(newBoard);\n    console.log(\"newBoard:\", newBoard);\n    console.log(\"anotherBoard:\", anotherBoard);\n    for (let row = 0; row < anotherBoard.length; row++) {\n      for (let col = 0; col < anotherBoard[row].length; col++) {\n        if (anotherBoard[row][col] === 0) {\n          // console.log(\"anotherboard\",anotherBoard)\n          return changeBoard(row,col,newBoard[row][col])\n          // anotherBoard[row][col] = newBoard[row][col];\n          // return setBoard(anotherBoard);\n        }\n      }\n    }\n  };\n\n  const random = async () => {\n    const newBoard = await generateSudoku();\n    setBoard(newBoard);\n  };\n  // console.log(\"[Board] Rendering\");\n  // console.log(board);\n\n  let Board = null;\n  if (board) {\n    Board = board.map((row, rowNum) => {\n      return row.map((val, colNum) => {\n        return (\n          <Cell\n            val={val}\n            key={[rowNum, colNum]}\n            col={colNum}\n            row={rowNum}\n            board={board}\n            changeBoard={changeBoard}\n            possible={possible(board, rowNum, colNum, val)}\n          />\n        );\n      });\n    });\n  }\n\n  return (\n    <Fragment>\n      <Controls\n        random={random}\n        reset={resetBoard}\n        solver={solver}\n        solveOne={solveOne}\n      />\n      <div className={styles.Board}>{Board}</div>\n    </Fragment>\n  );\n};\n\nexport default Board;\n","import { useState } from \"react\";\nimport { TEST_BOARD, newBoard } from \"../utility/index\";\n\nexport const useBoard = () => {\n  const [board, setBoard] = useState(() => TEST_BOARD);\n\n  const changeBoard = (row, col, newValue) => {\n    const newBoard = [...board];\n    newBoard[row][col] = newValue;\n    setBoard(newBoard);\n  };\n\n  const resetBoard = () => {\n    const newBoard = [...board];\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        newBoard[i][j] = 0;\n      }\n    }\n    setBoard(newBoard);\n  };\n\n  return [board, setBoard, changeBoard, resetBoard];\n};\n","import React from \"react\";\nimport Board from \"./components/Board/Board\";\n\nfunction App() {\n  console.log(\"App Rendered\")  \n  return (\n    <div className=\"App\">\n      <h1 className=\"Title\">Sudoku Solver</h1>\n      <br/>\n      <Board></Board>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}